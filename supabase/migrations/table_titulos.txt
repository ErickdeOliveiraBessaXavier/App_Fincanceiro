create table public.titulos (
  id uuid not null default gen_random_uuid (),
  cliente_id uuid not null,
  valor numeric(10, 2) not null,
  vencimento date not null,
  status text not null default 'em_aberto'::text,
  observacoes text null,
  created_by uuid not null,
  created_at timestamp with time zone not null default now(),
  updated_at timestamp with time zone not null default now(),
  constraint titulos_pkey primary key (id),
  constraint fk_cliente foreign KEY (cliente_id) references clientes (id) on delete CASCADE,
  constraint fk_created_by foreign KEY (created_by) references auth.users (id),
  constraint titulos_status_check check (
    (
      status = any (
        array[
          'em_aberto'::text,
          'pago'::text,
          'vencido'::text,
          'acordo'::text
        ]
      )
    )
  )
) TABLESPACE pg_default;

create index IF not exists idx_titulos_cliente_id on public.titulos using btree (cliente_id) TABLESPACE pg_default;

create index IF not exists idx_titulos_status on public.titulos using btree (status) TABLESPACE pg_default;

create index IF not exists idx_titulos_vencimento on public.titulos using btree (vencimento) TABLESPACE pg_default;

create index IF not exists idx_titulos_created_by on public.titulos using btree (created_by) TABLESPACE pg_default;

create trigger update_titulos_updated_at BEFORE
update on titulos for EACH row
execute FUNCTION update_updated_at_column ();